from collections import defaultdict
from typing import List, Dict

# Angry!

waiting_angry_phrases = {
    0: "Подождите, пожалуйста. Сейчас я обрабатываю Ваш предыдущий запрос.",
    1: "Подождите, друг мой нетерпелиывй!",
    2: "Если прошло больше 10 секунд, а результата всё ещё нет - обязательно сообщите ответственному по делам математического бота (в контактах группы)",
    3: "К сожалению, в интеллигентном режиме отключено эмоциональное обеспечение бота. Эх, создатели - злодеи..."
}

bad_commands_angry_phrases = {
    3 : "Пожалуйста, выберите одну из предложенных опций",
    4 : "К сожалению, данная опция мне не известна. Если хотите, чтобы она была добавлена, пишите на wolframalpha@wolframresearch.com",
    5 : "В интеллигентном режиме отключено эмоциональное обеспечение бота. Эх, создатели - злодеи...",
    6 : "АААААААААА!!! Не надо было меня доводить! Создатели, конечно, не добавили, но как можно быть настолько ... несообразительным, чтобы столько раз подряд не смочь правильно ввести команду???",
    7 :    "😡",
    8 :    "😡",
    9:     "😡😡",
    10 :   "😡😡😡",
    11 :   "😡😡😡😡",
    12 :   "😡😡😡😡",
    13 :   "😡😡😡",
    14 :   "😡😡",
    15 :   "😡",
    16 :   "😡",
    17 :   "..."
}



################################################################################################################################################################################
# Function optimization info:

function_optimization_parameters = \
[
    "function",
    "target_minimum",
    "variable_ranges"
]

function_optimization_parameter_names = \
{
    "function": "Целевая функция",
    "target_minimum": "Предполагаемый минимум",
    "variable_ranges": "Диапазоны переменных"
}

reversed_function_optimization_parameter_names = \
{
    function_optimization_parameter_names[i] : i for i in function_optimization_parameter_names
}

function_optimization_parameter_description = \
{
    "function": "Введите функцию, которую Вы желаете оптимизировать.",

    "target_minimum": "Подтвердите, что целевая функция ограничена снизу на рассматриваемом множестве. "
                      "Для этого введите произвольную известную Вам нижнюю границу множества значений функции (на данном множестве). "
                      "В случае если введённое число не окажется минорирующим для исходной функции, бот будет работать с заметными погрешностями. ",

    "variable_ranges": "Пожалуйста, укажите для каждой переменной её максимальное и минимальное значение. "
                       "Будет найден минимум целевой функции в данном диапазоне."
}


function_optimizing_parameter_examples = \
{
    "function": "0.5 + (cos(sin(abs(x^2 - y^2)))^2 - 0.5) / (1 + 0.001(x^2 + y^2))^2",
    "target_minimum": "0.1 или -23.9e30",
    "variable_ranges": "x ∈ (-1; 10]; y: in 30.6 -> 100., 10 < z <= 11e-2"
}

################################################################################################################################################################################



# Solving equations:
################################################################################################################################################################################

equation_solving_parameters = \
[
    "function",
    "variable_ranges"
]

equation_solving_parameter_names = \
{
    "function": "Уравнение",
    "variable_ranges": "Диапазоны переменных"
}

reversed_equation_solving_parameter_names = \
{
    equation_solving_parameter_names[i] : i for i in equation_solving_parameter_names
}

equation_solving_parameter_description = \
{
    "function": "Введите уравнение, которое Вы хотите разрешить.",

    "variable_ranges": "Пожалуйста, укажите для каждой переменной в уравнении её максимальное и минимальное значение. "
                       "Будет осуществлён поиск корней на соответствующем множестве. "
}

equation_solving_parameter_examples = \
{
    "function": "x^2 = -y**2",
    "variable_ranges": function_optimizing_parameter_examples["variable_ranges"]
}
################################################################################################################################################################################


################################################################################################################################################################################
# Plotting:

plotting_parameters = \
[
    "functions",
    "variable_range"
]

plotting_parameter_names = \
{
    "functions": "Функции",
    "variable_range": "Диапазон переменной"
}

reversed_plotting_parameter_names = \
{
    plotting_parameter_names[i]: i for i in plotting_parameter_names
}

plotting_parameter_description = \
{
    "functions": "Функции для отображения на графике.",

    "variable_range": "Укажите интервал изменения переменной, на котором следует построить график функций."
}

plotting_parameter_examples = \
{
    "functions": "0.5x + 5 && 3sin(x) && 5sqrt(abs(x) - 5) && 10sgn(x) * sqrt(abs(x))",  # "0.5x + 5 && max(5x^2, 10x - 1) && 5sqrt(abs(x) - 5) && 10sgn(x) * sqrt(x)",
    "variable_range": "x ∈ (-4; 4]"
}

